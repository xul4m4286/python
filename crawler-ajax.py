# 抓取 Medium.COM 的文章資料
import urllib.request as req
import json
url="https://medium.com/_/graphql"
# 建立一個 Request 物件，附加 Request Headers 的資訊
headers={"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.183 Safari/537.36", "Content-Type":"application/json"}
payloadData={"operationName":"HomeFeedQueryNew","variables":{"paging":{"to":str("a"),"limit":10}},"query":"query HomeFeedQueryNew($paging: PagingOptions) {\n  homeFeedWithExplanation(paging: $paging) {\n    items {\n      feedId\n      reason\n      postProviderExplanation {\n        reason\n        user {\n          id\n          name\n          __typename\n        }\n        topic {\n          id\n          name\n          __typename\n        }\n        collection {\n          id\n          name\n          __typename\n        }\n        __typename\n      }\n      post {\n        id\n        ...HomeFeed_post\n        __typename\n      }\n      __typename\n    }\n    pagingInfo {\n      next {\n        limit\n        to\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment HomeFeed_post on Post {\n  id\n  ...HomeFeedItem_post\n  ...HomeReadingListItem_post\n  __typename\n}\n\nfragment HomeFeedItem_post on Post {\n  __typename\n  id\n  title\n  firstPublishedAt\n  mediumUrl\n  collection {\n    id\n    name\n    domain\n    logo {\n      id\n      __typename\n    }\n    __typename\n  }\n  creator {\n    id\n    name\n    username\n    imageId\n    mediumMemberAt\n    hasDomain\n    __typename\n  }\n  previewImage {\n    id\n    __typename\n  }\n  previewContent {\n    subtitle\n    __typename\n  }\n  readingTime\n  ...BookmarkButton_post\n  ...CreatorActionOverflowPopover_post\n  ...PostPresentationTracker_post\n  ...PostPreviewAvatar_post\n}\n\nfragment BookmarkButton_post on Post {\n  ...SusiClickable_post\n  ...WithSetReadingList_post\n  __typename\n}\n\nfragment SusiClickable_post on Post {\n  id\n  mediumUrl\n  ...SusiContainer_post\n  __typename\n}\n\nfragment SusiContainer_post on Post {\n  id\n  __typename\n}\n\nfragment WithSetReadingList_post on Post {\n  ...ReadingList_post\n  __typename\n}\n\nfragment ReadingList_post on Post {\n  __typename\n  id\n  readingList\n}\n\nfragment CreatorActionOverflowPopover_post on Post {\n  allowResponses\n  id\n  statusForCollection\n  isLocked\n  isPublished\n  clapCount\n  viewerClapCount\n  mediumUrl\n  pinnedAt\n  pinnedByCreatorAt\n  ...useIsPinnedInContext_post\n  pendingCollection {\n    id\n    name\n    viewerIsEditor\n    creator {\n      id\n      __typename\n    }\n    avatar {\n      id\n      __typename\n    }\n    domain\n    slug\n    __typename\n  }\n  creator {\n    id\n    isBlocking\n    ...MutePopoverOptions_creator\n    ...auroraHooks_publisher\n    __typename\n  }\n  collection {\n    id\n    viewerIsEditor\n    name\n    creator {\n      id\n      __typename\n    }\n    avatar {\n      id\n      __typename\n    }\n    domain\n    slug\n    ...MutePopoverOptions_collection\n    ...auroraHooks_publisher\n    __typename\n  }\n  ...ClapMutation_post\n  __typename\n}\n\nfragment MutePopoverOptions_creator on User {\n  id\n  isMuting\n  __typename\n}\n\nfragment MutePopoverOptions_collection on Collection {\n  id\n  viewerIsEditor\n  viewerIsMuting\n  __typename\n}\n\nfragment ClapMutation_post on Post {\n  __typename\n  id\n  clapCount\n  viewerClapCount\n  ...MultiVoteCount_post\n}\n\nfragment MultiVoteCount_post on Post {\n  id\n  ...PostVotersNetwork_post\n  __typename\n}\n\nfragment PostVotersNetwork_post on Post {\n  voterCount\n  viewerClapCount\n  recommenders {\n    name\n    __typename\n  }\n  __typename\n}\n\nfragment useIsPinnedInContext_post on Post {\n  id\n  collection {\n    id\n    __typename\n  }\n  pendingCollection {\n    id\n    __typename\n  }\n  pinnedAt\n  pinnedByCreatorAt\n  __typename\n}\n\nfragment auroraHooks_publisher on Publisher {\n  __typename\n  ... on Collection {\n    isAuroraEligible\n    isAuroraVisible\n    viewerIsEditor\n    __typename\n  }\n  ... on User {\n    isAuroraVisible\n    __typename\n  }\n}\n\nfragment PostPresentationTracker_post on Post {\n  id\n  visibility\n  previewContent {\n    isFullContent\n    __typename\n  }\n  collection {\n    id\n    slug\n    __typename\n  }\n  __typename\n}\n\nfragment PostPreviewAvatar_post on Post {\n  __typename\n  id\n  collection {\n    id\n    name\n    ...CollectionAvatar_collection\n    ...collectionUrl_collection\n    __typename\n  }\n  creator {\n    id\n    username\n    name\n    ...UserAvatar_user\n    __typename\n  }\n}\n\nfragment CollectionAvatar_collection on Collection {\n  name\n  avatar {\n    id\n    __typename\n  }\n  ...collectionUrl_collection\n  __typename\n}\n\nfragment collectionUrl_collection on Collection {\n  id\n  domain\n  slug\n  __typename\n}\n\nfragment UserAvatar_user on User {\n  username\n  id\n  name\n  imageId\n  mediumMemberAt\n  hasDomain\n  __typename\n}\n\nfragment HomeReadingListItem_post on Post {\n  id\n  title\n  creator {\n    id\n    name\n    username\n    socialStats {\n      followerCount\n      __typename\n    }\n    ...UserAvatar_user\n    __typename\n  }\n  mediumUrl\n  createdAt\n  readingTime\n  collection {\n    id\n    name\n    navItems {\n      url\n      __typename\n    }\n    ...CollectionAvatar_collection\n    __typename\n  }\n  visibility\n  __typename\n}\n"}
payloadData=json.dumps(payloadData).encode("utf-8")
request=req.Request(url, data=payloadData, headers=headers)

with req.urlopen(request) as response:
    data=response.read().decode("utf-8") # 根據觀察，取得的資料是 JSON 的格式

# 解析 JSON 格式的資料，取得每篇文章的標題
data=json.loads(data) # 把原始的資料解析成字典/列表的表示型態
# print(data)
# 至於回傳的資料各層標題也有改:
posts = data["data"]["homeFeedWithExplanation"]["items"]
# # 在這層設置迴圈(因為這層命名是從0開始編號的序數)
for key in posts:
    post = key["post"]["title"]
    print(post)

